# Generated by Django 3.0.7 on 2020-10-28 10:06

import datetime
from decimal import Decimal
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Broker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_brok', models.CharField(max_length=100, verbose_name='Broker name')),
                ('birthday', models.DateField(verbose_name='Date of birth')),
                ('phone_brok', models.CharField(blank=True, max_length=11, verbose_name='Broker phone')),
                ('address_brok', models.CharField(blank=True, max_length=100, verbose_name='Broker address')),
            ],
            options={
                'verbose_name': 'Broker',
                'verbose_name_plural': 'Brokers',
            },
        ),
        migrations.CreateModel(
            name='CD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_cd', models.CharField(max_length=100, verbose_name='CD name')),
                ('prod_date', models.DateField(verbose_name='Production date')),
                ('descr', models.CharField(blank=True, max_length=100, null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'CD',
                'verbose_name_plural': 'CDs',
                'ordering': ('-prod_date',),
            },
        ),
        migrations.CreateModel(
            name='Deal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_deal', models.CharField(default='0', max_length=4, verbose_name='Deal code')),
                ('date_deal', models.DateField(default=datetime.datetime.now, verbose_name='Date deal')),
                ('quantity_sale', models.PositiveIntegerField(verbose_name='Sale quantity')),
                ('br_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='salon_app.Broker', verbose_name='Broker id')),
                ('cd_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='salon_app.CD', verbose_name='CD id')),
            ],
            options={
                'verbose_name': 'Deal',
                'verbose_name_plural': 'Deals',
            },
        ),
        migrations.CreateModel(
            name='Firm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_sup', models.CharField(max_length=100)),
                ('address_sup', models.CharField(blank=True, max_length=100)),
                ('sup_about', models.TextField()),
            ],
            options={
                'verbose_name': 'Firm',
                'verbose_name_plural': 'Firms',
            },
        ),
        migrations.CreateModel(
            name='Supply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_supp', models.CharField(default='0', max_length=4, verbose_name='Supply code')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Price')),
                ('date_supp', models.DateField(default=datetime.datetime.now, verbose_name='Supply date')),
                ('quantity_ad', models.PositiveIntegerField(verbose_name='Admission quantity')),
                ('cd_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='salon_app.CD', verbose_name='CD name')),
                ('sup_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='salon_app.Firm', verbose_name='Supplier name')),
            ],
            options={
                'verbose_name': 'Supply',
                'verbose_name_plural': 'Supplies',
            },
        ),
        migrations.CreateModel(
            name='InDeals',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_deal', models.DateField(default=datetime.datetime.now, verbose_name='Deal date')),
                ('deals', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='salon_app.Deal', verbose_name='Deal id')),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('name', models.CharField(max_length=100, primary_key=True, serialize=False, verbose_name='Name')),
                ('genre', models.CharField(blank=True, max_length=85, null=True, verbose_name='Genre')),
                ('author', models.CharField(max_length=55, verbose_name='Author')),
                ('cd_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='salon_app.CD', verbose_name='CD name')),
            ],
            options={
                'verbose_name': 'Game',
                'verbose_name_plural': 'Games',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_num', models.CharField(blank=True, max_length=20, verbose_name='Phone number')),
                ('address', models.CharField(blank=True, max_length=100, verbose_name='Address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('purchases', models.ManyToManyField(to='salon_app.InDeals')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Client',
                'verbose_name_plural': 'Clients',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
